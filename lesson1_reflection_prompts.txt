How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It speeded up getting to the root of the issue by pinpointing what exactly changed since the last working version.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

You can always roll-back to a previous version if anything breaks. No need for the time-consuming visual scans if something breaks..

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Commit only if you're certain to some degree that your changes are good to go and have a logical meaning to understand later on. With autosave though, it could help in case we forget to save
    and some unexpected issue happens before our planned manual commit (e.g. system crash)

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    More control on what user intentions to change instead of wild card save. Some changes might be related/affecting multiple resources, that's why git allows saving multiple files.

How can you use the commands git log and git diff to view the history of files?

    git log should show all commited changes, but git diff should help with seeing fhe changes done between two commits?

How might using version control make you more confident to make changes that
could break something?

    You can alwasy revert back to the master/version that didn't have the latest changes with issue.

Now that you have your workspace set up, what do you want to try using Git for?

    Saving Java source code.